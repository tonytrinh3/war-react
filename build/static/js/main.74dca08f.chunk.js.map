{"version":3,"sources":["view/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","burnCardIndex1","burnCardIndex2","index","className","playerNumber","src","alt","card","image","code","App","cardNumber","playerCard","cardNumTemp","split","compareCards","playerOneCurrentCard","playerTwoCurrentCard","a","async","cardPot","push","console","log","setState","renderCardArray","state","playerOneDeck","splice","length","playerTwoDeck","playerOnePile","concat","winnerToken","shufflePileDeck","renderCards","playerTwoPile","equalCardDuel","card1","card2","burnCardInd","even","shuffleHelper","playerNameDeck","playerDeck","playerPile","cardPileToCode","funcPlayerDeck","funcPlayerPile","map","fetch","deck_id","toString","json","deckAndPilesDraw","cards","changeCard","cardArray","cardLoop","key","deckSize","result","data","this","playerOne","playerTwo","alert","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74dca08f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport '../sass/main.scss';\r\n\r\nconst Card = (props) => {\r\n\r\n    let burnCardIndex1 = 2;\r\n    let burnCardIndex2 =3;\r\n    \r\n    if (props.index === burnCardIndex1 || props.index === burnCardIndex2) {\r\n        burnCardIndex1 += 4;//in array of cards to display, we want to show the back of the card for index 2 and 3 bc they are burn cards. if we have more than 6 cards in war, then we would add +4 into the index to burn card index 6 and 7, 10 and 11, etc.\r\n        burnCardIndex2 += 4;\r\n        return <img className = {\"playing-card playing-card--\" + props.playerNumber} src=\"https://upload.wikimedia.org/wikipedia/commons/5/54/Card_back_06.svg\" alt = \"back of card\"/>;\r\n    } else {\r\n        return <img className = {\"playing-card playing-card--\" + props.playerNumber} src ={props.card.image} alt = {props.card.code}/>\r\n    }\r\n}\r\n\r\nexport default Card;\r\n\r\n// const renderCard = (card, playerNumber) =>{\r\n            \r\n//     const displayCard = `<img class = \"card--${playerNumber}\" src = ${card.image} alt = ${card.code}/>`;\r\n\r\n//     // const cardIndex = (playerNumber*10)+index+1;\r\n\r\n//     document.querySelector(`.players-card__player-${playerNumber}`).insertAdjacentHTML('beforeend',displayCard);\r\n\r\n//     //https://dev.to/karataev/set-css-styles-with-javascript-3nl5\r\n//     let style = document.createElement('style');\r\n//     style.innerHTML = `\r\n//     .players-card__card {\r\n//     background-color: green;\r\n//     }\r\n//     `;\r\n//     document.head.appendChild(style);\r\n//     //passed down the cards array from json, cardindex that is relevant to changing the card, and player number\r\n//     // renderNewCard(cards,index, playerNumber);\r\n\r\n// };\r\n","import React from 'react';\r\nimport Card from './view/Card';\r\n\r\nimport './sass/main.scss';\r\n\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      deck_id: \"\",\r\n      deckSize: 52,\r\n      playerOneDeck: [],\r\n      playerTwoDeck: [],\r\n      playerOnePile: [],\r\n      playerTwoPile: [],\r\n      playerOneCurrentCard:null,\r\n      playerTwoCurrentCard:null,\r\n      winnerToken: 0,\r\n      renderCardArray:[]\r\n    };\r\n\r\n    //this binding is necessary to make \"this\" work in the callback function\r\n    // this.changeCard = this.changeCard.bind(this);\r\n    //this.onSearchSubmit = this.onSearchSubmit.bind(this);\r\n\r\n  }\r\n\r\n  //componentDidMount is where you fetch the data\r\n  async componentDidMount (){\r\n    try{\r\n      const result = await fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\r\n      const data = await result.json();\r\n\r\n  \r\n      //this is an array of 5 \r\n      const playerOne = await(await fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=${this.state.deckSize/2}`)).json();\r\n      const playerTwo= await(await fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=${this.state.deckSize/2}`)).json();\r\n\r\n      this.setState({\r\n        deck_id: data.deck_id,\r\n        playerOneDeck: playerOne.cards,\r\n        playerTwoDeck: playerTwo.cards,\r\n        playerOneCurrentCard: playerOne.cards[0],\r\n        playerTwoCurrentCard: playerTwo.cards[0]\r\n      });\r\n\r\n      //console.log(this.state.playerOneDeck);\r\n      //console.log(this.state.playerTwoDeck);\r\n    \r\n      \r\n    } catch(error){\r\n      alert(error);\r\n    }\r\n    \r\n  };\r\n  \r\n  cardNumber = (playerCard) =>{\r\n    const splitCardCode= playerCard.code.split(\"\");\r\n    const cardNumTemp= splitCardCode[0];\r\n    if (cardNumTemp === \"A\"){\r\n        return 14;\r\n    } else if (cardNumTemp === \"K\"){\r\n        return 13;\r\n    } else if (cardNumTemp === \"Q\"){\r\n        return 12;\r\n    } else if (cardNumTemp === \"J\"){\r\n        return 11;\r\n    } else if (cardNumTemp === \"0\"){\r\n        return 10;\r\n    } else {\r\n        return cardNumTemp;\r\n    }              \r\n  };\r\n\r\n    //it seems like button is just trigger logic to render things or not \r\n    //im just thinking that the button should only be used to switch a logic to show and hide things..\r\n    //this could technically be a separate component - the button \r\n\r\n  \r\n\r\n \r\n\r\n  compareCards= async (playerOneCurrentCard , playerTwoCurrentCard)=> {\r\n    let cardPot = [];\r\n    cardPot.push(playerOneCurrentCard,playerTwoCurrentCard);\r\n    console.log(cardPot);\r\n\r\n    this.setState({\r\n      renderCardArray: []\r\n    });\r\n  \r\n  \r\n    if (this.cardNumber(playerOneCurrentCard) > this.cardNumber(playerTwoCurrentCard)){\r\n\r\n      // console.log(this.state.playerOnePile);\r\n      // console.log(this.state.playerOneCurrentCard);\r\n      // console.log(this.state.playerTwoCurrentCard);\r\n\r\n      this.state.playerOneDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n      this.state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player two deck bc they lost\r\n\r\n      this.setState({\r\n      \r\n        playerOnePile: this.state.playerOnePile.concat(cardPot),//add card won onto pile for future use in deck api\r\n        playerOneCurrentCard: this.state.playerOneDeck[0],\r\n        playerTwoCurrentCard: this.state.playerTwoDeck[0],\r\n        winnerToken: 1,\r\n        renderCardArray: cardPot\r\n      });\r\n\r\n      // console.log(this.state.playerOnePile);\r\n      // console.log(this.state.playerOneCurrentCard);\r\n      // console.log(this.state.playerTwoCurrentCard);\r\n\r\n      //console.log(this.state.renderCardArray);\r\n   \r\n     cardPot = [];\r\n\r\n     //console.log(this.state.playerOnePile);\r\n\r\n     this.shufflePileDeck();\r\n\r\n      \r\n      return this.renderCards(this.state.renderCardArray);\r\n    } else if (this.cardNumber(playerTwoCurrentCard) > this.cardNumber(playerOneCurrentCard)){\r\n\r\n\r\n      // console.log(this.state.playerTwoPile);\r\n      // console.log(this.state.playerOneCurrentCard);\r\n      // console.log(this.state.playerTwoCurrentCard);\r\n\r\n      this.state.playerOneDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n      this.state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player two deck bc they lost\r\n\r\n\r\n\r\n      this.setState({\r\n    \r\n        playerTwoPile: this.state.playerTwoPile.concat(cardPot),//add card won onto pile for future use in deck api\r\n        playerOneCurrentCard: this.state.playerOneDeck[0],\r\n        playerTwoCurrentCard: this.state.playerTwoDeck[0],\r\n        winnerToken: 2,\r\n        renderCardArray: cardPot\r\n      });\r\n\r\n      \r\n      // console.log(this.state.playerTwoPile);\r\n      // console.log(this.state.playerOneCurrentCard);\r\n      // console.log(this.state.playerTwoCurrentCard);\r\n\r\n\r\n\r\n      cardPot = [];\r\n      \r\n      //console.log(this.state.renderCardArray);\r\n\r\n      this.shufflePileDeck();\r\n\r\n\r\n     return this.renderCards(this.state.renderCardArray);\r\n\r\n    } \r\n    else if (this.cardNumber(playerOneCurrentCard) === this.cardNumber(playerTwoCurrentCard)){\r\n\r\n        this.equalCardDuel(cardPot);\r\n        return this.renderCards(this.state.renderCardArray);\r\n        \r\n    }\r\n  \r\n  \r\n  }\r\n\r\n\r\n  equalCardDuel = (cardPot) => {\r\n\r\n\r\n      let card1 = this.cardNumber(this.state.playerOneCurrentCard) ;\r\n      let card2 = this.cardNumber(this.state.playerTwoCurrentCard);\r\n      let burnCardInd = 1;\r\n      let even = 2;\r\n\r\n      while(card1 === card2){\r\n\r\n        this.shufflePileDeck();\r\n\r\n        cardPot.push(this.state.playerOneDeck[burnCardInd],this.state.playerTwoDeck[burnCardInd]);\r\n        cardPot.push(this.state.playerOneDeck[even],this.state.playerTwoDeck[even]);\r\n\r\n        //console.log(this.state.playerOneDeck);\r\n        //console.log(this.state.playerTwoDeck);\r\n        if (this.cardNumber(this.state.playerOneDeck[even]) > this.cardNumber(this.state.playerTwoDeck[even])){\r\n\r\n        this.state.playerOneDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n        this.state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player two deck bc they lost\r\n\r\n        this.setState({\r\n          playerOnePile: this.state.playerOnePile.concat(cardPot),//add card won onto pile for future use in deck api\r\n          playerOneCurrentCard: this.state.playerOneDeck[even],\r\n          playerTwoCurrentCard: this.state.playerTwoDeck[even],\r\n          winnerToken: 1,\r\n          renderCardArray: cardPot\r\n        });\r\n\r\n\r\n\r\n          //console.log(this.state.playerOneDeck[even]);\r\n          //console.log(this.state.playerTwoDeck[even]);\r\n          //console.log(cardPot);\r\n          cardPot = []; \r\n\r\n\r\n          break\r\n        } else if (this.cardNumber(this.state.playerTwoDeck[even]) > this.cardNumber(this.state.playerOneDeck[even])){\r\n\r\n          this.state.playerOneDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n          this.state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player two deck bc they lost\r\n\r\n          this.setState({\r\n            playerTwoPile: this.state.playerTwoPile.concat(cardPot),//add card won onto pile for future use in deck api\r\n            playerOneCurrentCard: this.state.playerOneDeck[even],\r\n            playerTwoCurrentCard: this.state.playerTwoDeck[even],\r\n            winnerToken: 2,\r\n            renderCardArray: cardPot\r\n          });\r\n\r\n\r\n\r\n          //console.log(this.state.playerOneDeck[even]);\r\n          //console.log(this.state.playerTwoDeck[even]);\r\n          //console.log(cardPot);\r\n          cardPot = []; \r\n\r\n          break\r\n        } else if (this.cardNumber(this.state.playerOneDeck[even]) === this.cardNumber(this.state.playerTwoDeck[even])){\r\n            card1 = this.cardNumber(this.state.playerOneDeck[even]); \r\n            card2 = this.cardNumber(this.state.playerTwoDeck[even]);\r\n            burnCardInd = burnCardInd + 2;\r\n            even = even + 2;\r\n        }\r\n      }\r\n      \r\n  };\r\n\r\n  //get pile to s\r\n  shufflePileDeck = () =>{\r\n\r\n    const shuffleHelper = async(playerNameDeck, playerDeck, playerPile ) =>{\r\n\r\n\r\n      //this changes cardpile into codes to be put into piles draw\r\n      const cardPileToCode = (funcPlayerDeck,funcPlayerPile) =>{\r\n        return funcPlayerDeck.concat(funcPlayerPile).map(card=>{\r\n          return card.code;\r\n        })\r\n      };\r\n\r\n\r\n      const deckAndPiles = await( await fetch(`https://deckofcardsapi.com/api/deck/${this.state.deck_id}/pile/${playerNameDeck}/add/?cards=${cardPileToCode(playerDeck, playerPile).toString()}`) ).json();\r\n      const deckAndPilesShuffle = await(await fetch(`https://deckofcardsapi.com/api/deck/${this.state.deck_id}/pile/${playerNameDeck}/shuffle/`)).json();\r\n  \r\n      //const pilesList = await(await fetch(`https://deckofcardsapi.com/api/deck/${this.state.deck_id}/pile/${playerNameDeck}/list/`)).json();\r\n      // console.log(pilesList);\r\n      const deckAndPilesDraw = await(await fetch(`https://deckofcardsapi.com/api/deck/${this.state.deck_id}/pile/${playerNameDeck}/draw/?count=${cardPileToCode(playerDeck,playerPile).length }`)).json();\r\n      console.log(deckAndPilesDraw.cards)\r\n\r\n       if (playerNameDeck==='playerOneDeck'){\r\n          this.setState({\r\n            playerOneDeck: deckAndPilesDraw.cards,\r\n            playerOnePile: []\r\n          });\r\n        \r\n       } else if (playerNameDeck==='playerTwoDeck'){\r\n          this.setState({\r\n            playerTwoDeck: deckAndPilesDraw.cards,\r\n            playerTwoPile: []\r\n          });\r\n       };\r\n\r\n       console.log(this.state.playerOneDeck);\r\n       console.log(this.state.playerTwoDeck);\r\n\r\n    };\r\n\r\n \r\n   \r\n   if (this.state.playerOneDeck.length === 3 && this.state.playerTwoDeck.length === 3 ) {\r\n   \r\n    shuffleHelper('playerOneDeck', this.state.playerOneDeck,this.state.playerOnePile );\r\n    shuffleHelper('playerTwoDeck', this.state.playerTwoDeck,this.state.playerTwoPile);\r\n\r\n  } else if (this.state.playerOneDeck.length === 3 ){\r\n    shuffleHelper('playerOneDeck', this.state.playerOneDeck,this.state.playerOnePile );\r\n   }else if (this.state.playerTwoDeck.length === 3 ){\r\n    shuffleHelper('playerTwoDeck', this.state.playerTwoDeck,this.state.playerTwoPile);\r\n   }\r\n\r\n  };\r\n\r\n  \r\n\r\n\r\n  //im starting to think you just pass what card to render to the rendercard\r\n  //all logic of what to render could be done in the rendercard but that doesn't separate Model view controller \r\n\r\n  changeCard=()=>{\r\n    //only trigger this button when the api has pulled the cards\r\n    if(this.state.playerOneCurrentCard){\r\n    this.compareCards(this.state.playerOneCurrentCard, this.state.playerTwoCurrentCard);\r\n\r\n    }\r\n  };\r\n\r\n\r\n  renderCards=(cardArray)=>{\r\n    //so when fetching api, you need a conditional to render this if only the state has been updated, which takes a while since you are updating it after componentDidUpdate and not in componenWillUpdate\r\n    \r\n    const cardLoop = cardArray.map((card, index) =>{\r\n      return <Card card = {card} playerNumber = {index%2 === 0 ? 1 : 2} key ={card.code} index = {index}/>\r\n    });\r\n    \r\n    if(this.state.renderCardArray){\r\n     return (cardLoop);\r\n    }\r\n  };\r\n\r\n\r\n  render(){\r\n\r\n    const showRoundWin = ()=>{\r\n      return this.state.winnerToken === 0 ? null : this.state.winnerToken === 1 ? \"Player One wins this round\":\"Player Two wins this round\";\r\n    };\r\n\r\n    const renderCardsLogic = () =>{\r\n      return this.state.renderCardArray === [] ? null : this.renderCards(this.state.renderCardArray);\r\n    };\r\n\r\n\r\n    const renderPileLogicPlayer1= () =>{\r\n      if (this.state.playerOnePile === []){\r\n        return null\r\n      } else if (this.state.playerOnePile.length  >= 2) {\r\n        return (\r\n         <img className = \"playing-pile playing-pile--1\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/54/Card_back_06.svg\" alt = \"back of card\"/>\r\n        )\r\n      }\r\n    };\r\n\r\n    const renderPileLogicPlayer2= () =>{\r\n      if (this.state.playerTwoPile === []){\r\n        return null\r\n      } else if (this.state.playerTwoPile.length  >= 2){\r\n        return (\r\n          <img className = \" playing-pile playing-pile--2\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/54/Card_back_06.svg\" alt = \"back of card\"/>\r\n        )\r\n      }\r\n    };\r\n\r\n    const renderDeckLogicPlayer1= () =>{\r\n      if (this.state.playerOneDeck === []){\r\n        return null\r\n      } else  {\r\n        return (\r\n          <img className = \"playing-deck playing-deck--1\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/54/Card_back_06.svg\" alt = \"back of card\"/>\r\n          )\r\n      }\r\n    };\r\n\r\n    const renderDeckLogicPlayer2= () =>{\r\n      if (this.state.playerTwoDeck === []){\r\n        return null\r\n      } else {\r\n        return (\r\n           <img className = \"playing-deck playing-deck--2\"src=\"https://upload.wikimedia.org/wikipedia/commons/5/54/Card_back_06.svg\" alt = \"back of card\"/>\r\n          )\r\n      }\r\n    };\r\n    \r\n    return (\r\n      <div className = \"container\">\r\n        <div className = \"playing-area\">\r\n          \r\n            {renderCardsLogic()}\r\n            <h3 className = \"playing-area-text\">{showRoundWin()}</h3>\r\n          \r\n        </div>\r\n        <div className = 'playing-pile-area'>\r\n         \r\n            <h1 className= \"playing-pile-text playing-pile-text--1\">Player One Pile {this.state.playerOnePile.length}</h1>\r\n            {renderPileLogicPlayer1()}\r\n            <h1 className= \"playing-pile-text playing-pile-text--2\">Player Two Pile {this.state.playerTwoPile.length}</h1>\r\n            {renderPileLogicPlayer2()}\r\n          \r\n        </div>\r\n        <div className = 'playing-deck-area'>\r\n          \r\n          <h1 className= \"playing-deck-text playing-deck-text--1\" >Player One Deck {this.state.playerOneDeck.length}</h1>\r\n          {renderDeckLogicPlayer1()}\r\n    \r\n          <h1 className= \"playing-deck-text playing-deck-text--2\">Player Two Deck {this.state.playerTwoDeck.length}</h1>\r\n          {renderDeckLogicPlayer2()}\r\n          <button className = \"btn war-button\" onClick = {this.changeCard} >Time to War</button>\r\n          \r\n        </div>\r\n        <div className=\"rule-text\">\r\n          <h1>Note: This game will have bugs over time when you continue to play the game</h1>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n// // const fetchAsyncA = async () => await (await fetch('https://api.github.com')).json()\r\n// // https://gist.github.com/msmfsd/fca50ab095b795eb39739e8c4357a808\r\n\r\n// const playWar = async () => {\r\n//     try{\r\n//         const result = await fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\r\n//         const data = await result.json();\r\n//         state.deck_id = data.deck_id;\r\n    \r\n        \r\n\r\n//         //this is an array of 5 \r\n//         const playerOne = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/draw/?count=${52/2}`)).json();\r\n      \r\n        \r\n//         const playerTwo= await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/draw/?count=${52/2}`)).json();\r\n       \r\n//     //     const carArray = [\"AS\",\"2S\",\"KS\",\"QS\"];\r\n//     //     const piles = await(await fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/pile/${'funny'}/add/?cards=${carArray.toString()}`)).json();\r\n//     //     console.log(piles);\r\n//     //     const pilesShuffle = await(await fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/pile/${'funny'}/shuffle/`)).json();\r\n//     //     console.log(pilesShuffle);\r\n\r\n        \r\n//     //     const pilesList = await(await fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/pile/${'funny'}/list/`)).json();\r\n//     //    const pilesDraw =  await(await fetch(`https://deckofcardsapi.com/api/deck/${data.deck_id}/pile/${'funny'}/draw/?count=4`)).json();\r\n//     //     console.log(pilesDraw.cards);\r\n        \r\n        \r\n//         state.playerOneDeck = playerOne.cards;\r\n       \r\n \r\n//         state.playerTwoDeck = playerTwo.cards;\r\n    \r\n\r\n    \r\n\r\n//         //https://stackoverflow.com/questions/33846682/react-onclic,k-function-fires-on-render/33846747\r\n//         //Because you are calling that function instead of passing the function to onClick, change that line to this:\r\n\r\n        \r\n//         const renderCard = (card, playerNumber) =>{\r\n            \r\n//             const displayCard = `<img class = \"card--${playerNumber}\" src = ${card.image} alt = ${card.code}/>`;\r\n\r\n\r\n//             document.querySelector(`.players-card__player-${playerNumber}`).insertAdjacentHTML('beforeend',displayCard);\r\n\r\n//             //https://dev.to/karataev/set-css-styles-with-javascript-3nl5\r\n//             let style = document.createElement('style');\r\n//             style.innerHTML = `\r\n//             .players-card__card {\r\n//             background-color: green;\r\n//             }\r\n//             `;\r\n//             document.head.appendChild(style);\r\n//             //passed down the cards array from json, cardindex that is relevant to changing the card, and player number\r\n\r\n//         };\r\n\r\n\r\n//         state.playerOnePile = [];\r\n\r\n//         state.playerTwoPile = [];\r\n\r\n//         const cardNumber = (cardCode) =>{\r\n//             const splitCardCode= cardCode.split(\"\");\r\n//             const cardNumTemp= splitCardCode[0];\r\n//             if (cardNumTemp === \"A\"){\r\n//                 return 14;\r\n//             } else if (cardNumTemp === \"K\"){\r\n//                 return 13;\r\n//             } else if (cardNumTemp === \"Q\"){\r\n//                 return 12;\r\n//             } else if (cardNumTemp === \"J\"){\r\n//                 return 11;\r\n//             } else if (cardNumTemp === \"0\"){\r\n//                 return 10;\r\n//             } else {\r\n//                 return cardNumTemp;\r\n//             }              \r\n//         };\r\n\r\n\r\n//         // const compareCards = (playerOneCard,playerTwoCard) => {\r\n//         //     const cardPot = [];\r\n//         //     cardPot.push(playerOneCard,playerTwoCard);\r\n//         //     if (cardNumber(playerOneCard) > cardNumber(playerTwoCard)){\r\n//         //         state.playerOnePile = state.playerOnePile.concat(cardPot);//add card won onto pile for future use in deck api\r\n//         //         state.playerOneDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n//         //         state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player two deck bc they lost\r\n//         //     } else if (cardNumber(playerTwoCard) > cardNumber(playerOneCard)){\r\n//         //         state.playerTwoPile = state.playerTwoPile.concat(cardPot);//add card won onto pile for future use in deck api\r\n//         //         state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n//         //         state.playerOneDeck.splice(0,cardPot.length/2);\r\n//         //     } else if (cardNumber(playerOneCard) === cardNumber(playerTwoCard)){\r\n\r\n//         //     }\r\n//         // };\r\n\r\n//         const equalCardDuel = (cardPot) =>{\r\n//             let card1 = cardNumber(state.playerOneDeck[0].code) ;\r\n//             let card2 = cardNumber(state.playerTwoDeck[0].code);\r\n//             let odd = 1;\r\n//             let even =2\r\n    \r\n//             while(card1 === card2){\r\n//                 setTimeout(renderCard(state.playerOneDeck[odd], 1),10000);\r\n//                 setTimeout(renderCard(state.playerTwoDeck[odd], 2),10000);\r\n//                 cardPot.push(state.playerOneDeck[odd].code,state.playerTwoDeck[odd].code);\r\n//                 //cardPot.push(state.playerOneDeck[odd],state.playerTwoDeck[odd]);\r\n    \r\n//                 setTimeout(renderCard(state.playerOneDeck[even], 1),10000);\r\n//                 setTimeout(renderCard(state.playerTwoDeck[even], 2),10000);\r\n//                 cardPot.push(state.playerOneDeck[even].code,state.playerTwoDeck[even].code);\r\n//                 //cardPot.push(state.playerOneDeck[even],state.playerTwoDeck[even]);\r\n    \r\n//                 if (cardNumber(state.playerOneDeck[even].code) > cardNumber(state.playerTwoDeck[even].code)){\r\n//                     state.playerOnePile = state.playerOnePile.concat(cardPot);//add card won onto pile for future use in deck api\r\n//                     //state.playerOneDeck = state.playerOneDeck.concat(cardPot);//add card won onto pile for future use in deck api\r\n//                     state.playerOneDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n//                     state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player two deck bc they lost\r\n//                     break\r\n//                 } else if (cardNumber(state.playerTwoDeck[even].code) > cardNumber(state.playerOneDeck[even].code)){\r\n//                     state.playerTwoPile = state.playerTwoPile.concat(cardPot);//add card won onto pile for future use in deck api\r\n//                     //state.playerTwoDeck = state.playerTwoDeck.concat(cardPot);//add card won onto pile for future use in deck api\r\n//                     state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n//                     state.playerOneDeck.splice(0,cardPot.length/2);\r\n//                     break\r\n//                 } else if (cardNumber(state.playerOneDeck[even].code) === cardNumber(state.playerTwoDeck[even].code)){\r\n//                     card1 = cardNumber(state.playerOneDeck[even].code); \r\n//                     card2 = cardNumber(state.playerTwoDeck[even].code);\r\n//                     odd = odd + 2;\r\n//                     even = even + 2;\r\n//                 }\r\n//             }\r\n            \r\n//         }\r\n\r\n\r\n\r\n//         const dummy = async () =>{\r\n\r\n            \r\n//             renderCard(state.playerOneDeck[0], 1);\r\n//             renderCard(state.playerTwoDeck[0], 2);\r\n    \r\n\r\n\r\n\r\n//             let style = document.createElement('style');\r\n//             style.innerHTML = `\r\n        \r\n//             `;\r\n//             document.head.appendChild(style);\r\n\r\n//             const cardPot = [];\r\n//             cardPot.push(state.playerOneDeck[0].code,state.playerTwoDeck[0].code);\r\n//             //cardPot.push(state.playerOneDeck[0],state.playerTwoDeck[0]);\r\n            \r\n\r\n//             if (cardNumber(state.playerOneDeck[0].code) > cardNumber(state.playerTwoDeck[0].code)){\r\n//                 state.playerOnePile = state.playerOnePile.concat(cardPot);//add card won onto pile for future use in deck api\r\n//                 //state.playerOneDeck = state.playerOneDeck.concat(cardPot);//add card won onto pile for future use in deck api\r\n//                 state.playerOneDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n//                 state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player two deck bc they lost\r\n//             } else if (cardNumber(state.playerTwoDeck[0].code) > cardNumber(state.playerOneDeck[0].code)){\r\n//                 state.playerTwoPile = state.playerTwoPile.concat(cardPot);//add card won onto pile for future use in deck api\r\n//                 //state.playerTwoDeck = state.playerTwoDeck.concat(cardPot);//add card won onto pile for future use in deck api\r\n//                 state.playerTwoDeck.splice(0,cardPot.length/2);//removes card from player one deck bc it is already in pile \r\n//                 state.playerOneDeck.splice(0,cardPot.length/2);\r\n//             } else if (cardNumber(state.playerOneDeck[0].code) === cardNumber(state.playerTwoDeck[0].code)){\r\n//                 //deal with end case where you have less then 3 cards but happen to draw same card on card number 2\r\n//                 if (state.playerOneDeck.length + state.playerOnePile.length < 3){\r\n//                     let style = document.createElement('style');\r\n//                     style.innerHTML = `\r\n//                     .winner h1{\r\n//                         display:block;\r\n//                     }\r\n//                 `;\r\n//                 document.head.appendChild(style);\r\n//                 document.querySelector(\".war__button\").disabled = true;\r\n//                 document.querySelector('.winner__header').innerHTML = \"Player Two won!\"\r\n//                     //deal with end case where you have less then 3 cards but happen to draw same card on card number 2\r\n//                 } else if (state.playerTwoDeck.length + state.playerTwoPile.length < 3) {\r\n//                     let style = document.createElement('style');\r\n//                     style.innerHTML = `\r\n//                         .winner h1{\r\n//                             display:block;\r\n//                         }\r\n//                     `;\r\n//                     document.head.appendChild(style);\r\n//                     document.querySelector(\".war__button\").disabled = true;\r\n//                     document.querySelector('.winner__header').innerHTML = \"Player One won!\" \r\n//                 //edge case when you happen to draw equal card on card number 1 but don't have enough card in deck but enough in pile\r\n//                 } else if (state.playerOneDeck.length < 3 && state.playerOnePile.length > 3) {\r\n                    \r\n//                     document.querySelector(`.war__button`).disabled = true;\r\n\r\n//                     const playerOneDeck = 'playerOneDeck';\r\n\r\n//                     const piles = await( await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerOneDeck}/add/?cards=${state.playerOnePile.toString()}`) ).json();\r\n//                     const pilesShuffle = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerOneDeck}/shuffle/`)).json();\r\n                \r\n//                     const pilesList = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerOneDeck}/list/`)).json();\r\n//                     console.log(pilesList);\r\n//                     const pilesDraw = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerOneDeck}/draw/?count=${state.playerOnePile.length }`)).json();\r\n//                     console.log(pilesDraw);\r\n//                     state.playerOneDeck = state.playerOneDeck.concat(pilesDraw.cards);\r\n\r\n//                     //  state.playerOneDeck = [...state.playerOneDeck, ...pilesDraw.cards]\r\n//                     state.playerOnePile=[];\r\n//                     console.log(state.playerOneDeck);\r\n//                     console.log(state.playerOnePile);\r\n\r\n//                     document.querySelector(`.war__button`).disabled = false;\r\n\r\n//                     equalCardDuel(cardPot);\r\n                    \r\n\r\n//                 } else if(state.playerTwoDeck.length < 3 && state.playerTwoPile.length > 3) {\r\n                    \r\n//                     document.querySelector(`.war__button`).disabled = true;\r\n//                     const playerTwoDeck = 'playerTwoDeck';\r\n//                     const piles = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerTwoDeck}/add/?cards=${state.playerTwoPile.toString()}`)).json();\r\n                    \r\n//                     const pilesShuffle = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerTwoDeck}/shuffle/`)).json();\r\n             \r\n//                     const pilesList = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerTwoDeck}/list/`)).json();\r\n//                     console.log(pilesList);\r\n//                     const pilesDraw = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerTwoDeck}/draw/?count=${state.playerTwoPile.length}`)).json();\r\n//                     console.log(pilesDraw);\r\n//                     state.playerTwoDeck = state.playerTwoDeck.concat(pilesDraw.cards);\r\n    \r\n//                     // state.playerTwoDeck = [...state.playerTwoDeck, ...pilesDraw.cards];\r\n//                     state.playerTwoPile=[];\r\n                    \r\n//                     console.log(state.playerTwoDeck);\r\n//                     console.log(state.playerTwoPile);\r\n    \r\n//                     document.querySelector(`.war__button`).disabled = false;\r\n\r\n//                     equalCardDuel(cardPot);\r\n//                 } else {\r\n//                     equalCardDuel(cardPot);\r\n//                 }\r\n//             }\r\n\r\n//             console.log(state.playerOneDeck);\r\n//             console.log(state.playerOnePile);\r\n//             console.log(state.playerTwoDeck);\r\n//             console.log(state.playerTwoPile);\r\n\r\n           \r\n\r\n//             document.querySelector('.card-count__player-1').innerHTML = `${state.playerOneDeck.length + state.playerOnePile.length } in the deck`;\r\n//             document.querySelector('.card-count__player-2').innerHTML = `${state.playerTwoDeck.length + state.playerTwoPile.length } in the deck`;\r\n\r\n//             //document.querySelector('.card-count__player-1').innerHTML = `${state.playerOneDeck.length } in the deck`;\r\n//             //document.querySelector('.card-count__player-2').innerHTML = `${state.playerTwoDeck.length } in the deck`;\r\n\r\n//             //pileToDeck();\r\n//         };\r\n\r\n//         const pileToDeck = async () => {\r\n//             if (state.playerOneDeck.length === 0){\r\n\r\n//                 document.querySelector(`.war__button`).disabled = true;\r\n\r\n//                 const playerOneDeck = 'playerOneDeck';\r\n\r\n//                 const piles = await( await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerOneDeck}/add/?cards=${state.playerOnePile.toString()}`) ).json();\r\n//                 const pilesShuffle = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerOneDeck}/shuffle/`)).json();\r\n              \r\n//                 const pilesList = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerOneDeck}/list/`)).json();\r\n//                console.log(pilesList);\r\n//                const pilesDraw = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerOneDeck}/draw/?count=${state.playerOnePile.length }`)).json();\r\n//                 console.log(pilesDraw);\r\n//                 state.playerOneDeck = state.playerOneDeck.concat(pilesDraw.cards);\r\n\r\n//                 //  state.playerOneDeck = [...state.playerOneDeck, ...pilesDraw.cards]\r\n//                 state.playerOnePile=[];\r\n//                 console.log(state.playerOneDeck);\r\n//                 console.log(state.playerOnePile);\r\n\r\n//                 document.querySelector(`.war__button`).disabled = false;\r\n                \r\n//             } \r\n            \r\n//             if (state.playerTwoDeck.length === 0){\r\n\r\n//                 document.querySelector(`.war__button`).disabled = true;\r\n//                 const playerTwoDeck = 'playerTwoDeck';\r\n//                 const piles = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerTwoDeck}/add/?cards=${state.playerTwoPile.toString()}`)).json();\r\n                \r\n//                 const pilesShuffle = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerTwoDeck}/shuffle/`)).json();\r\n         \r\n//                 const pilesList = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerTwoDeck}/list/`)).json();\r\n//                 console.log(pilesList);\r\n//                 const pilesDraw = await(await fetch(`https://deckofcardsapi.com/api/deck/${state.deck_id}/pile/${playerTwoDeck}/draw/?count=${state.playerTwoPile.length}`)).json();\r\n//                 console.log(pilesDraw);\r\n//                 state.playerTwoDeck = state.playerTwoDeck.concat(pilesDraw.cards);\r\n\r\n//                 // state.playerTwoDeck = [...state.playerTwoDeck, ...pilesDraw.cards];\r\n//                 state.playerTwoPile=[];\r\n                \r\n//                 console.log(state.playerTwoDeck);\r\n//                 console.log(state.playerTwoPile);\r\n\r\n//                 document.querySelector(`.war__button`).disabled = false;\r\n//             } \r\n\r\n//         };\r\n\r\n\r\n//         const winnerLog = () =>{\r\n//             if (state.playerOneDeck.length + state.playerOnePile.length === 0 ){\r\n//                 let style = document.createElement('style');\r\n//                 style.innerHTML = `\r\n//                     .winner h1{\r\n//                         display:block;\r\n//                     }\r\n//                 `;\r\n//                 document.head.appendChild(style);\r\n              \r\n\r\n//                 document.querySelector('.winner__header').innerHTML = \"Player Two won!\"\r\n//                 document.querySelector(`.war__button`).disabled = true;\r\n\r\n//             } else if (state.playerTwoDeck.length + state.playerTwoPile.length === 0 ){\r\n//                 let style = document.createElement('style');\r\n//                 style.innerHTML = `\r\n//                     .winner h1{\r\n//                         display:block;\r\n//                     }\r\n//                 `;\r\n//                 document.head.appendChild(style);\r\n                \r\n//                 document.querySelector('.winner__header').innerHTML = \"Player One won!\" \r\n//                 document.querySelector(`.war__button`).disabled = true;\r\n//             }\r\n//         }\r\n        \r\n//         document.querySelector(`.war__button`).addEventListener('click', () =>{\r\n//             //i only did this to trigger the if function\r\n//             let el1 = document.querySelector(`.card--1`);\r\n//             let el2 = document.querySelector(`.card--2`);\r\n\r\n//             if (el1 && el2){\r\n//                 //https://www.w3schools.com/jsref/met_node_removechild.asp\r\n//                 //select all card\r\n//                 //it is an array\r\n//                 el1 = document.querySelectorAll(`.card--1`);\r\n            \r\n//                 el2 = document.querySelectorAll(`.card--2`);\r\n                \r\n//                 //remove all cards by going through each element of array\r\n//                 el1.forEach((curEl)=>{\r\n//                     curEl.parentElement.removeChild(curEl);\r\n//                 })\r\n                \r\n//                 el2.forEach((curEl)=>{\r\n//                     curEl.parentElement.removeChild(curEl);\r\n//                 })\r\n\r\n\r\n//                 dummy();\r\n\r\n\r\n               \r\n\r\n\r\n\r\n//                 if (state.playerOneDeck < 52 || state.playerTwoDeck < 52){\r\n//                     pileToDeck();\r\n//                 }\r\n            \r\n                \r\n               \r\n//             } else {\r\n\r\n//                 dummy();\r\n            \r\n//             }\r\n\r\n//             winnerLog();\r\n//         });\r\n\r\n        \r\n\r\n    \r\n//     } catch (error){\r\n//         alert(error);\r\n//     }\r\n    \r\n// };\r\n\r\n// playWar();\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}